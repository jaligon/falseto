/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.univ_tours.li.jaligon.falseto.sessionDesign;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import mondrian.olap.Hierarchy;
import mondrian.olap.Level;
import fr.univ_tours.li.jaligon.falseto.QueryStructure.ProjectionFragment;

/**
 *
 * @author julien
 */
public class QueryResultInfoGui extends javax.swing.JPanel {

    /**
     * Creates new form QueryResultInfoGui
     */
    private QueryGui queryGui;
    private List<Level> columnLevels;
    private List<Level> rowLevels;

    public QueryResultInfoGui(QueryGui queryGui) {
        initComponents();
        this.queryGui = queryGui;
        columnLevels = new ArrayList<Level>();
        rowLevels = new ArrayList<Level>();

        columnList.setModel(new DefaultListModel());
        rowList.setModel(new DefaultListModel());

        HashSet<ProjectionFragment> projections = queryGui.getQuery().getAttributes();

        for (ProjectionFragment pf : projections) {
            columnLevels.add(pf.getLevel());
            rowLevels.add(pf.getLevel());
        }

        for (Hierarchy h : fr.univ_tours.li.jaligon.falseto.Generics.Generics.getHierarchies()) {
            if (h.getDefaultMember().isMeasure()) {
                columnLevels.add(h.getDefaultMember().getLevel());
                rowLevels.add(h.getDefaultMember().getLevel());
                break;
            }
        }

        initializeComboBox();

    }

    private void initializeComboBox() {
        for (Level l : columnLevels) {
            levelColumnComboBox.addItem(l);
        }

        for (Level l : rowLevels) {
            levelRowComboBox.addItem(l);
        }
    }

    public void addColumnList(Level l) {
        DefaultListModel model = (DefaultListModel) columnList.getModel();
        model.addElement(l);
    }

    public void addRowList(Level l) {
        DefaultListModel model = (DefaultListModel) rowList.getModel();
        model.addElement(l);
    }

    public void initializeEmpty() {
        columnLevels = new ArrayList<Level>();
        rowLevels = new ArrayList<Level>();
        levelColumnComboBox.removeAllItems();
        levelRowComboBox.removeAllItems();
        
        DefaultListModel model = (DefaultListModel) rowList.getModel();
        model.removeAllElements();
        
        model = (DefaultListModel) columnList.getModel();
        model.removeAllElements();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        levelColumnComboBox = new javax.swing.JComboBox();
        addColumnButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        columnList = new javax.swing.JList();
        removeColumnButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        levelRowComboBox = new javax.swing.JComboBox();
        addRowButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        rowList = new javax.swing.JList();
        removeRowButton = new javax.swing.JButton();
        resultButton = new javax.swing.JButton();
        imageButton = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("ON COLUMNS"));

        addColumnButton.setText("Add");
        addColumnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addColumnButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(columnList);

        removeColumnButton.setText("Remove");
        removeColumnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeColumnButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(levelColumnComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(addColumnButton))
                    .add(removeColumnButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(levelColumnComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addColumnButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(removeColumnButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("ON ROWS"));

        addRowButton.setText("Add");
        addRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(rowList);

        removeRowButton.setText("Remove");
        removeRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(levelRowComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 192, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(addRowButton))
                    .add(jScrollPane2)
                    .add(removeRowButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(levelRowComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(addRowButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(removeRowButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        resultButton.setText("Refresh the cross-table");
        resultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultButtonActionPerformed(evt);
            }
        });

        imageButton.setText("Save an image of the cross-table");
        imageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(37, 37, 37)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(resultButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 232, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(imageButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 232, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(resultButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(imageButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addColumnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addColumnButtonActionPerformed
        // TODO add your handling code here:
        Level level = (Level) levelColumnComboBox.getSelectedItem();

        if (level != null) {
            levelColumnComboBox.removeItem(level);
            levelRowComboBox.removeItem(level);
            queryGui.addOnColumns(level);

            DefaultListModel model = (DefaultListModel) columnList.getModel();
            model.addElement(level);
        }
        //columnList.setModel(model);
    }//GEN-LAST:event_addColumnButtonActionPerformed

    private void addRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowButtonActionPerformed
        // TODO add your handling code here:
        Level level = (Level) levelRowComboBox.getSelectedItem();

        if (level != null) {
            levelColumnComboBox.removeItem(level);
            levelRowComboBox.removeItem(level);
            queryGui.addOnRows(level);

            DefaultListModel model = (DefaultListModel) rowList.getModel();
            model.addElement(level);
        }
        //rowList.setModel(model);
    }//GEN-LAST:event_addRowButtonActionPerformed

    private void removeColumnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeColumnButtonActionPerformed
        // TODO add your handling code here:
        Level level = (Level) columnList.getSelectedValue();

        if (level != null) {
            levelColumnComboBox.addItem(level);
            levelRowComboBox.addItem(level);
            queryGui.removeOnColumns(level);

            DefaultListModel model = (DefaultListModel) columnList.getModel();
            model.removeElement(level);
        }
    }//GEN-LAST:event_removeColumnButtonActionPerformed

    private void removeRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowButtonActionPerformed
        // TODO add your handling code here:
        Level level = (Level) rowList.getSelectedValue();

        if (level != null) {
            levelColumnComboBox.addItem(level);
            levelRowComboBox.addItem(level);
            queryGui.removeOnRows(level);

            DefaultListModel model = (DefaultListModel) rowList.getModel();
            model.removeElement(level);
        }
    }//GEN-LAST:event_removeRowButtonActionPerformed

    private void resultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultButtonActionPerformed
        // TODO add your handling code here:

        if (levelColumnComboBox.getItemCount() == 0) {
            queryGui.getQueryResultGui().initializeOnColumnsOnRows();
            queryGui.getQueryResultGui().repaint();
        } else {
            JOptionPane.showMessageDialog(queryGui, "Each level must be assigned on the Columns/Rows");
        }
    }//GEN-LAST:event_resultButtonActionPerformed

    private void imageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageButtonActionPerformed
        // TODO add your handling code here:
        BufferedImage img = getImage(queryGui.getQueryResultGui());

        File outputfile = new File("cross-table.png");
        try {
            ImageIO.write(img, "png", outputfile);
            
            JOptionPane.showMessageDialog(queryGui, "The cross-table has been copied with success!");
        } catch (IOException ex) {
            Logger.getLogger(QueryResultInfoGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        //CopyImagetoClipBoard copy = new CopyImagetoClipBoard(img);//copy to the clipboard
    }//GEN-LAST:event_imageButtonActionPerformed

    private BufferedImage getImage(QueryResultGui component) {
        if (component == null) {
            return null;
        }
        int width = component.crossTableWidth;
        int height = component.crossTableHeight;
        BufferedImage image = new BufferedImage(width, height,
                BufferedImage.TYPE_INT_RGB);
        Graphics2D g = image.createGraphics();

        component.paintAll(g);
        g.dispose();
        return image;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addColumnButton;
    private javax.swing.JButton addRowButton;
    private javax.swing.JList columnList;
    private javax.swing.JButton imageButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox levelColumnComboBox;
    private javax.swing.JComboBox levelRowComboBox;
    private javax.swing.JButton removeColumnButton;
    private javax.swing.JButton removeRowButton;
    private javax.swing.JButton resultButton;
    private javax.swing.JList rowList;
    // End of variables declaration//GEN-END:variables
}
